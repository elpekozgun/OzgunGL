#include <string>
//#include <GL/glew.h>
//#include <GL/GLU.h>
#include<glad\glad.h>
#include <GLFW\glfw3.h>
#include "Macros.h"

void FrameBufferSizeCallback(GLFWwindow* window, int width, int height);
void ProcessInput(GLFWwindow* window);
void ShaderLogger(unsigned int Shader, const char* shaderType);
void ProgramLinkLogger(unsigned int Program);

const unsigned int SCR_HEIGHT = 600;
const unsigned int SCR_WIDTH = 800;

const char* vertexShaderSource = 
"#version 330 core\n"
"layout(location = 0) in vec3 Pos;\n"
"layout(location = 1) in vec3 Color;\n"
"out vec3 vertexColor;"
"void main()\n"
"{\n"
"gl_Position = vec4(Pos, 1.0);\n"
"vertexColor = Color;"
"}\n";

const char* fragmentShaderSource =
"#version 330 core\n"
"out vec4 FragColor;\n"
"in vec3 vertexColor;"
"void main()\n"
"{ FragColor = vec4(vertexColor,1.0f); /*vec4(1.0f,0.5f,0.2f,1.0f);*/ }";

int main(void)
{

	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	#ifdef __APPLE__
		glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);						//needed for MacOS
	#endif
		
	
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Ozgun GL", NULL, NULL);
	if (!window)
	{
		LOG("Failed to Create GLFW Window");
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);


	//Need a wrapper like GLAD, GLEW etc to easily wrap OpenGL functions like glViewport();
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))	//platform specific
	{
		LOG("Failed to Initialize GLAD");
		return -1;
	}
	
	glfwSetFramebufferSizeCallback(window, FrameBufferSizeCallback);

	unsigned int vertexShader;
	vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
	glCompileShader(vertexShader);
	ShaderLogger(vertexShader, "VERTEX");

	unsigned int fragmentShader;
	fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
	glCompileShader(fragmentShader);
	ShaderLogger(fragmentShader, "FRAGMENT");

	//Shader Program
	unsigned int ShaderProgram;
	ShaderProgram = glCreateProgram();
	glAttachShader(ShaderProgram, vertexShader);
	glAttachShader(ShaderProgram, fragmentShader);
	glLinkProgram(ShaderProgram);
	ProgramLinkLogger(ShaderProgram);
	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);

	glClearColor(0.15f, 0.15f, 0.15f, 1.0f);

	//float triangle1[] = { -0.5f,-0.5f,0.0f,
	//					   0.5f,-0.5f,0.0f,
	//					  -0.5f, 0.5f,0.0f};
	//float triangle2[] = {  0.5f,-0.5f,0.0f,
	//					   0.5f, 0.5f,0.0f,
	//					   0.0f, 0.5f,0.0f };

	float vertices[] = { 0.5f, 0.5f,0.0f,
						  0.5f,-0.5f,0.0f,
						 -0.5f,-0.5f,0.0f,
					     -0.5f, 0.5f,0.0f};

	float verticesWithMore[] = {
		// positions         // colors
		0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   // bottom right
		-0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   // bottom left
		0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f    // top 
	};

	unsigned int indices[] = { 0, 1, 3,
							   1, 2, 3};

	unsigned int VAO,VBO,EBO;

#pragma region Binding vertex array using a buffer and unbinding

	glGenVertexArrays(1, &VAO);		// stores the state of a buffer, and can be reused multiple times. A must to use in core profile.
	glGenBuffers(1, &VBO);			// meaning: Create 1 buffer for me at the memory address of VBO
	glGenBuffers(1, &EBO);

									// Rule of thumb, generate a vertex array object first before manipulating vertex buffer.
	glBindVertexArray(VAO);

	// VAO -> VBO -> EBO -> Attribute(shader location) -> enable VertexArray

	//these 2 functions are the ones that link corresponding VBO to VAO
	glBindBuffer(GL_ARRAY_BUFFER, VBO);													// meaning: Select the vbo buffer to the target which is an array.	
	glBufferData(GL_ARRAY_BUFFER, sizeof(verticesWithMore), &verticesWithMore[0], GL_STATIC_DRAW);		// meaning: assign a vertices sized buffer to array buffer target, 
																						// and assign data starting from vertices[0], and draw them static later.
																						// glBindBuffer(GL_ARRAY_BUFFER, 0);	if I write it like this, it unselects the array buffer we binded above.
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);	// or &indices[0]
	
	glEnableVertexAttribArray(0);	//layout in vertex shader  layout(location = 0)		// meaning: Change your state to draw this. Stride = total size of a single vertex attribute (position, normal, color total etc.) YOUR SHADER LOCATION AND THIS MUST BE SAME
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);		// meaning: Layout of the buffer. attribute 0, 3 elements, float type, not normalized, total size of a stride, offset of the attribute
																						// glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);		// offset and position of yout next vertex attribute(eg color)	// layout 15 ten büyükse çizmiyor. 0-15
	glEnableVertexAttribArray(1);	//layout in vertex shader  layout(location = 1)
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
																						
																						// glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)20);	// offset and position of yout next vertex attribute(eg uv)
	glBindBuffer(GL_ARRAY_BUFFER, 0);	//after binding the vertex array object with the related vertex buffer, i can simply detach them and call vertex array object whenever i need that.
	//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
	glBindVertexArray(0);



	int vertexColorLocation = glGetUniformLocation(ShaderProgram, "ourColor");
	glUseProgram(ShaderProgram);



#pragma endregion
	int nrAttributes;
	glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &nrAttributes);										// there are generally max 16 vertex attributes on GPU for vertex shaders generally, use this to check max number
	std::cout << "Maximum nr of vertex attributes supported: " << nrAttributes << std::endl;		

	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	while (!glfwWindowShouldClose(window))
	{
		ProcessInput(window);

		glClear(GL_COLOR_BUFFER_BIT);
		
		float time = glfwGetTime();
		float greenVal = (sin(time) * 2.0f + 0.5f);
		glUniform4f(vertexColorLocation, 0.0f, greenVal, 0.0f, 1.0f);

		glBindVertexArray(VAO);		// here we want to draw VAO so we bind the previously generated vertex array object. nice and ez.
		//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,EBO);

		//glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
		glDrawArrays(GL_TRIANGLES, 0, 3);
		glfwSwapBuffers(window);		//swaps buffer for rendering
		glfwPollEvents();				//for responsiveness
	}

	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);
	glDeleteBuffers(1, &EBO);

	CLOSEWIN();
}
